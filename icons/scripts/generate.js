/* eslint-disable no-console */
const path = require('path')
const util = require('util')
const execa = require('execa')
const rimraf = require('rimraf')
const chalk = require('chalk')
const glob = require('glob')
const fse = require('fs-extra')
const prettier = require('prettier')

const EOL = '\r\n'

const rimrafp = util.promisify(rimraf)

async function generate() {
  return Promise.all([
    generateComponents(path.resolve(__dirname, '../src/svgs/core'), path.resolve(__dirname, '../src/core')),
    generateComponents(path.resolve(__dirname, '../src/svgs/links'), path.resolve(__dirname, '../src/links')),
    generateComponents(path.resolve(__dirname, '../src/svgs/pax'), path.resolve(__dirname, '../src/pax')),
    generateComponents(path.resolve(__dirname, '../src/svgs/flags'), path.resolve(__dirname, '../src/flags')),
  ])
}

async function generateComponents(srcPath, outPath) {
  console.log(chalk.green('Generating fresh components...'))
  await rimrafp(outPath)

  // removeUnknownsAndDefaults needs to be false otherwise fill="#000" will be removed
  const svgoConfig = {
    plugins: [{ removeTitle: true }, { removeUnknownsAndDefaults: false }],
  }

  // Primary icon color: '#000' will be replaced with 'currentColor' so it can be styled with 'color'
  // Secondary icon color: '#8c8c8c' will be replaced with 'inherit' so it can be styled with 'fill'
  await execa(
    'svgr',
    [
      '--ext',
      'tsx',
      '--icon',
      '--ref',
      '--replace-attr-values',
      '#000=currentColor',
      '--replace-attr-values',
      '#8c8c8c=inherit',
      '--svgo-config',
      JSON.stringify(svgoConfig),
      '--template',
      'scripts/template.js',
      '--out-dir',
      outPath,
      srcPath,
    ],
    {
      stdio: 'inherit',
    }
  )

  const files = glob.sync('*.tsx', { cwd: outPath })
  console.log(chalk.green('Generating index file with exports'))
  await createIndexFile(files, outPath)
  await createAllIconsFile(files, outPath)
}

async function createIndexFile(files, outPath) {
  const lines = files.reduce((lines, file) => {
    const name = path.parse(file).name
    lines.push(`export { default as ${name} } from './${name}'`)
    return lines
  }, [])
  lines.unshift('/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */')

  const content = await format(lines.join(EOL))
  await fse.writeFile(path.resolve(outPath, './index.ts'), content, 'utf8')
}

async function createAllIconsFile(files, outPath) {
  console.log(chalk.green(`Generating all-icons.ts file in ${outPath}`))
  const lines = ["import * as Icons from './'", 'const all = ', '[']

  lines.push(
    ...files.reduce((lines, file) => {
      const name = path.parse(file).name
      lines.push(` { name:'${name}', component: Icons.${name} },`)
      return lines
    }, [])
  )
  lines.push(']')
  lines.push('export default all')
  lines.unshift('/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */')

  const content = await format(lines.join(EOL))
  await fse.writeFile(path.resolve(outPath, './all-icons.ts'), content, 'utf8')
}

async function format(content) {
  const prettierConfig = await prettier.resolveConfig(process.cwd())
  return prettier.format(content, { parser: 'babel', ...prettierConfig })
}

if (require.main === module) {
  generate()
}

module.export = generate
