import _css from "@emotion/css";
import _styled from "@emotion/styled-base";
import { jsx as ___EmotionJSX } from "@emotion/core";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useState, useEffect } from 'react';
import { palette } from '@dfds-shared/colors';
import Logo from '../logo/Logo';
import { media } from '../styles/media';
import { rem } from '../styles/rem';

var DFDSLogo =
/*#__PURE__*/
_styled(Logo, {
  target: "emu4ai40"
})("height:", rem(32), ";width:", rem(112), ";margin-right:", rem(20), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9uYXYtYmFyL05hdkJhci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdUI2QiIsImZpbGUiOiIuLi8uLi9zcmMvbmF2LWJhci9OYXZCYXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXHJcbmltcG9ydCB7IHBhbGV0dGUgfSBmcm9tICdAZGZkcy1zaGFyZWQvY29sb3JzJ1xyXG5pbXBvcnQgTG9nbyBmcm9tICcuLi9sb2dvL0xvZ28nXHJcbmltcG9ydCBjc3MgZnJvbSAnQGVtb3Rpb24vY3NzJ1xyXG5pbXBvcnQgeyBtZWRpYSB9IGZyb20gJy4uL3N0eWxlcy9tZWRpYSdcclxuaW1wb3J0IHsgcmVtIH0gZnJvbSAnLi4vc3R5bGVzL3JlbSdcclxuXHJcbnR5cGUgSXRlbUFsaWdubWVudCA9ICdsZWZ0JyB8ICdyaWdodCdcclxuXHJcbnR5cGUgTmF2QmFyUHJvcHMgPSB7XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nXHJcbiAgc2hvd0xvZ28/OiBib29sZWFuXHJcbiAgaHJlZj86IHN0cmluZ1xyXG59XHJcblxyXG50eXBlIEl0ZW1Qcm9wcyA9IHtcclxuICBocmVmOiBzdHJpbmdcclxuICBjbGFzc05hbWU/OiBzdHJpbmdcclxuICBhbGlnbm1lbnQ/OiBJdGVtQWxpZ25tZW50XHJcbiAgc2VsZWN0ZWQ/OiBib29sZWFuXHJcbn1cclxuXHJcbmNvbnN0IERGRFNMb2dvID0gc3R5bGVkKExvZ28pYFxyXG4gIGhlaWdodDogJHtyZW0oMzIpfTtcclxuICB3aWR0aDogJHtyZW0oMTEyKX07XHJcbiAgbWFyZ2luLXJpZ2h0OiAke3JlbSgyMCl9O1xyXG5gXHJcblxyXG5jb25zdCBOYXZCYXJDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGJhY2tncm91bmQtY29sb3I6ICR7cGFsZXR0ZS53aGl0ZS5wcmltYXJ5fTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgbWluLWhlaWdodDogJHtyZW0oNjApfTtcclxuICAvKiBJRSBmbGV4Ym94IG1pbi1oZWlnaHQgZml4ICovXHJcbiAgOmFmdGVyIHtcclxuICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgbWluLWhlaWdodDogaW5oZXJpdDtcclxuICAgIGZvbnQtc2l6ZTogMDtcclxuICB9XHJcbmBcclxuXHJcbmNvbnN0IE5hdkJhcjogUmVhY3QuRkM8TmF2QmFyUHJvcHM+ID0gKHsgaHJlZiwgY2xhc3NOYW1lLCBzaG93TG9nbywgY2hpbGRyZW4sIC4uLnJlc3QgfSkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8TmF2QmFyQ29udGFpbmVyIGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBkYXRhLXRlc3RpZD1cIk5hdkJhclwiIHsuLi5yZXN0fT5cclxuICAgICAge3Nob3dMb2dvICYmIChcclxuICAgICAgICA8YSBocmVmPXtocmVmfT5cclxuICAgICAgICAgIDxERkRTTG9nbyAvPlxyXG4gICAgICAgIDwvYT5cclxuICAgICAgKX1cclxuICAgICAge2NoaWxkcmVufVxyXG4gICAgPC9OYXZCYXJDb250YWluZXI+XHJcbiAgKVxyXG59XHJcblxyXG5OYXZCYXIuZGVmYXVsdFByb3BzID0ge1xyXG4gIHNob3dMb2dvOiB0cnVlLFxyXG4gIGhyZWY6ICcvJyxcclxufVxyXG5cclxuY29uc3QgYmFzZUl0ZW1TdHlsZXMgPSBjc3NgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgYWxpZ24tc2VsZjogc3RyZXRjaDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICBwYWRkaW5nOiAwIDEuNXJlbTtcclxuICBjb2xvcjogJHtwYWxldHRlLnRleHRHcmV5LnByaW1hcnl9O1xyXG5gXHJcblxyXG5jb25zdCBJdGVtQW5jaG9yID0gc3R5bGVkLmE8eyBhbGlnbm1lbnQ/OiBJdGVtQWxpZ25tZW50OyBzZWxlY3RlZD86IGJvb2xlYW4gfT5gXHJcbiAgJHtiYXNlSXRlbVN0eWxlc31cclxuICBjb2xvcjogJHtwYWxldHRlLmdyb3VwQmx1ZS5wcmltYXJ5fTtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke3AgPT4gKHAuc2VsZWN0ZWQgPyBwYWxldHRlLmFjdGlvbkJsdWUubGlnaHQgOiAndHJhbnNwYXJlbnQnKX07XHJcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAke3BhbGV0dGUuYWN0aW9uQmx1ZS5saWdodH07XHJcbiAgZm9udC1zaXplOiAxcmVtO1xyXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcblxyXG4gIDpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3BhbGV0dGUuYWN0aW9uQmx1ZS50aW50fTtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICB9XHJcblxyXG4gIHRyYW5zZm9ybTogc2tld1goLTMwZGVnKTtcclxuICBzcGFuIHtcclxuICAgIHRyYW5zZm9ybTogc2tld1goMzBkZWcpO1xyXG4gIH1cclxuXHJcbiAgJHttZWRpYS5sdCgnbWQnKX0ge1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICB9XHJcbmBcclxuXHJcbi8vIFRPRE86IGNvbnNpZGVyIHVzaW5nIGZvcndhcmRSZWZcclxuZXhwb3J0IGNvbnN0IE5hdkJhckl0ZW06IFJlYWN0LkZDPEl0ZW1Qcm9wcz4gPSAoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBocmVmLCAuLi5yZXN0IH0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPEl0ZW1BbmNob3IgaHJlZj17aHJlZn0gY2xhc3NOYW1lPXtjbGFzc05hbWV9IHsuLi5yZXN0fT5cclxuICAgICAgPHNwYW4+e2NoaWxkcmVufTwvc3Bhbj5cclxuICAgIDwvSXRlbUFuY2hvcj5cclxuICApXHJcbn1cclxuXHJcbmNvbnN0IHB1c2hSaWdodCA9IGNzc2BcclxuICBtYXJnaW4tbGVmdDogYXV0bztcclxuICAmIH4gJiB7XHJcbiAgICBtYXJnaW4tbGVmdDogMDtcclxuICB9XHJcbmBcclxudHlwZSBOYXZCYXJJY29uUHJvcHMgPSBSZWFjdC5BbmNob3JIVE1MQXR0cmlidXRlczxIVE1MQW5jaG9yRWxlbWVudD4gJlxyXG4gIEl0ZW1Qcm9wcyAmIHsgbWVudT86IFJlYWN0LlJlYWN0Tm9kZTsgb25DbGljaz86IFJlYWN0Lk1vdXNlRXZlbnRIYW5kbGVyPEhUTUxBbmNob3JFbGVtZW50PiB9XHJcblxyXG5leHBvcnQgY29uc3QgTmF2QmFySWNvbkFuY2hvciA9IHN0eWxlZC5hPHsgbWVudVNob3duOiBib29sZWFuIH0+YFxyXG4gICR7YmFzZUl0ZW1TdHlsZXN9XHJcbiAgY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLnByaW1hcnl9O1xyXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xyXG5cclxuICA6aG92ZXIge1xyXG4gICAgY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLmhvdmVyfTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLnRpbnR9O1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gIH1cclxuXHJcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtwID0+IHAubWVudVNob3duICYmIHBhbGV0dGUuYWN0aW9uQmx1ZS50aW50fTtcclxuYFxyXG5cclxuY29uc3QgTmF2QmFySWNvbldyYXBwZXIgPSBzdHlsZWQuZGl2PHsgYWxpZ25tZW50PzogSXRlbUFsaWdubWVudCB9PmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBhbGlnbi1zZWxmOiBzdHJldGNoO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgJHtwID0+IHAuYWxpZ25tZW50ID09PSAncmlnaHQnICYmIHB1c2hSaWdodH1cclxuYFxyXG5cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1lbXB0eVxyXG5leHBvcnQgY29uc3QgTmF2QmFySWNvbjogUmVhY3QuRkM8TmF2QmFySWNvblByb3BzPiA9ICh7IGNoaWxkcmVuLCBhbGlnbm1lbnQsIG1lbnUsIG9uQ2xpY2ssIC4uLnJlc3QgfSkgPT4ge1xyXG4gIGNvbnN0IFttZW51U2hvd24sIHNldE1lbnVTaG93bl0gPSB1c2VTdGF0ZShmYWxzZSlcclxuICBjb25zdCBoYXNNZW51ID0gISFtZW51XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZURvY3VtZW50Q2xpY2soKSB7XHJcbiAgICBpZiAobWVudVNob3duKSB7XHJcbiAgICAgIHNldE1lbnVTaG93bihmYWxzZSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAobWVudVNob3duKSB7XHJcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlRG9jdW1lbnRDbGljaylcclxuICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZURvY3VtZW50Q2xpY2spXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVyblxyXG4gIH0pXHJcblxyXG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEFuY2hvckVsZW1lbnQ+KSA9PiB7XHJcbiAgICBpZiAoaGFzTWVudSkge1xyXG4gICAgICBzZXRNZW51U2hvd24oIW1lbnVTaG93bilcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChvbkNsaWNrKSB7XHJcbiAgICAgICAgb25DbGljayhlKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPE5hdkJhckljb25XcmFwcGVyIGFsaWdubWVudD17YWxpZ25tZW50fT5cclxuICAgICAgPE5hdkJhckljb25BbmNob3IgbWVudVNob3duPXttZW51U2hvd259IG9uQ2xpY2s9e2hhbmRsZUNsaWNrfSB7Li4ucmVzdH0+XHJcbiAgICAgICAge2NoaWxkcmVufVxyXG4gICAgICA8L05hdkJhckljb25BbmNob3I+XHJcbiAgICAgIHtoYXNNZW51ICYmIG1lbnVTaG93biAmJiA8TmF2QmFyRHJvcGRvd24gb25DbGljaz17KCkgPT4gc2V0TWVudVNob3duKGZhbHNlKX0+e21lbnV9PC9OYXZCYXJEcm9wZG93bj59XHJcbiAgICA8L05hdkJhckljb25XcmFwcGVyPlxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IE5hdkJhckRyb3Bkb3duID0gc3R5bGVkLmRpdmBcclxuICB6LWluZGV4OiAxO1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIGhlaWdodDogYXV0bztcclxuICB0b3A6IDEwMCU7XHJcbiAgcmlnaHQ6IDA7XHJcbiAgd2lkdGg6IDMwMHB4O1xyXG4gIGN1cnNvcjogZGVmYXVsdDtcclxuYFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTmF2QmFyXHJcbiJdfQ== */"));

var NavBarContainer = _styled("div", {
  target: "emu4ai41"
})("background-color:", palette.white.primary, ";display:flex;align-items:center;min-height:", rem(60), ";:after{content:'';min-height:inherit;font-size:0;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9uYXYtYmFyL05hdkJhci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkJrQyIsImZpbGUiOiIuLi8uLi9zcmMvbmF2LWJhci9OYXZCYXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXHJcbmltcG9ydCB7IHBhbGV0dGUgfSBmcm9tICdAZGZkcy1zaGFyZWQvY29sb3JzJ1xyXG5pbXBvcnQgTG9nbyBmcm9tICcuLi9sb2dvL0xvZ28nXHJcbmltcG9ydCBjc3MgZnJvbSAnQGVtb3Rpb24vY3NzJ1xyXG5pbXBvcnQgeyBtZWRpYSB9IGZyb20gJy4uL3N0eWxlcy9tZWRpYSdcclxuaW1wb3J0IHsgcmVtIH0gZnJvbSAnLi4vc3R5bGVzL3JlbSdcclxuXHJcbnR5cGUgSXRlbUFsaWdubWVudCA9ICdsZWZ0JyB8ICdyaWdodCdcclxuXHJcbnR5cGUgTmF2QmFyUHJvcHMgPSB7XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nXHJcbiAgc2hvd0xvZ28/OiBib29sZWFuXHJcbiAgaHJlZj86IHN0cmluZ1xyXG59XHJcblxyXG50eXBlIEl0ZW1Qcm9wcyA9IHtcclxuICBocmVmOiBzdHJpbmdcclxuICBjbGFzc05hbWU/OiBzdHJpbmdcclxuICBhbGlnbm1lbnQ/OiBJdGVtQWxpZ25tZW50XHJcbiAgc2VsZWN0ZWQ/OiBib29sZWFuXHJcbn1cclxuXHJcbmNvbnN0IERGRFNMb2dvID0gc3R5bGVkKExvZ28pYFxyXG4gIGhlaWdodDogJHtyZW0oMzIpfTtcclxuICB3aWR0aDogJHtyZW0oMTEyKX07XHJcbiAgbWFyZ2luLXJpZ2h0OiAke3JlbSgyMCl9O1xyXG5gXHJcblxyXG5jb25zdCBOYXZCYXJDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGJhY2tncm91bmQtY29sb3I6ICR7cGFsZXR0ZS53aGl0ZS5wcmltYXJ5fTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgbWluLWhlaWdodDogJHtyZW0oNjApfTtcclxuICAvKiBJRSBmbGV4Ym94IG1pbi1oZWlnaHQgZml4ICovXHJcbiAgOmFmdGVyIHtcclxuICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgbWluLWhlaWdodDogaW5oZXJpdDtcclxuICAgIGZvbnQtc2l6ZTogMDtcclxuICB9XHJcbmBcclxuXHJcbmNvbnN0IE5hdkJhcjogUmVhY3QuRkM8TmF2QmFyUHJvcHM+ID0gKHsgaHJlZiwgY2xhc3NOYW1lLCBzaG93TG9nbywgY2hpbGRyZW4sIC4uLnJlc3QgfSkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8TmF2QmFyQ29udGFpbmVyIGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBkYXRhLXRlc3RpZD1cIk5hdkJhclwiIHsuLi5yZXN0fT5cclxuICAgICAge3Nob3dMb2dvICYmIChcclxuICAgICAgICA8YSBocmVmPXtocmVmfT5cclxuICAgICAgICAgIDxERkRTTG9nbyAvPlxyXG4gICAgICAgIDwvYT5cclxuICAgICAgKX1cclxuICAgICAge2NoaWxkcmVufVxyXG4gICAgPC9OYXZCYXJDb250YWluZXI+XHJcbiAgKVxyXG59XHJcblxyXG5OYXZCYXIuZGVmYXVsdFByb3BzID0ge1xyXG4gIHNob3dMb2dvOiB0cnVlLFxyXG4gIGhyZWY6ICcvJyxcclxufVxyXG5cclxuY29uc3QgYmFzZUl0ZW1TdHlsZXMgPSBjc3NgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgYWxpZ24tc2VsZjogc3RyZXRjaDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICBwYWRkaW5nOiAwIDEuNXJlbTtcclxuICBjb2xvcjogJHtwYWxldHRlLnRleHRHcmV5LnByaW1hcnl9O1xyXG5gXHJcblxyXG5jb25zdCBJdGVtQW5jaG9yID0gc3R5bGVkLmE8eyBhbGlnbm1lbnQ/OiBJdGVtQWxpZ25tZW50OyBzZWxlY3RlZD86IGJvb2xlYW4gfT5gXHJcbiAgJHtiYXNlSXRlbVN0eWxlc31cclxuICBjb2xvcjogJHtwYWxldHRlLmdyb3VwQmx1ZS5wcmltYXJ5fTtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke3AgPT4gKHAuc2VsZWN0ZWQgPyBwYWxldHRlLmFjdGlvbkJsdWUubGlnaHQgOiAndHJhbnNwYXJlbnQnKX07XHJcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAke3BhbGV0dGUuYWN0aW9uQmx1ZS5saWdodH07XHJcbiAgZm9udC1zaXplOiAxcmVtO1xyXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcblxyXG4gIDpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3BhbGV0dGUuYWN0aW9uQmx1ZS50aW50fTtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICB9XHJcblxyXG4gIHRyYW5zZm9ybTogc2tld1goLTMwZGVnKTtcclxuICBzcGFuIHtcclxuICAgIHRyYW5zZm9ybTogc2tld1goMzBkZWcpO1xyXG4gIH1cclxuXHJcbiAgJHttZWRpYS5sdCgnbWQnKX0ge1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICB9XHJcbmBcclxuXHJcbi8vIFRPRE86IGNvbnNpZGVyIHVzaW5nIGZvcndhcmRSZWZcclxuZXhwb3J0IGNvbnN0IE5hdkJhckl0ZW06IFJlYWN0LkZDPEl0ZW1Qcm9wcz4gPSAoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBocmVmLCAuLi5yZXN0IH0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPEl0ZW1BbmNob3IgaHJlZj17aHJlZn0gY2xhc3NOYW1lPXtjbGFzc05hbWV9IHsuLi5yZXN0fT5cclxuICAgICAgPHNwYW4+e2NoaWxkcmVufTwvc3Bhbj5cclxuICAgIDwvSXRlbUFuY2hvcj5cclxuICApXHJcbn1cclxuXHJcbmNvbnN0IHB1c2hSaWdodCA9IGNzc2BcclxuICBtYXJnaW4tbGVmdDogYXV0bztcclxuICAmIH4gJiB7XHJcbiAgICBtYXJnaW4tbGVmdDogMDtcclxuICB9XHJcbmBcclxudHlwZSBOYXZCYXJJY29uUHJvcHMgPSBSZWFjdC5BbmNob3JIVE1MQXR0cmlidXRlczxIVE1MQW5jaG9yRWxlbWVudD4gJlxyXG4gIEl0ZW1Qcm9wcyAmIHsgbWVudT86IFJlYWN0LlJlYWN0Tm9kZTsgb25DbGljaz86IFJlYWN0Lk1vdXNlRXZlbnRIYW5kbGVyPEhUTUxBbmNob3JFbGVtZW50PiB9XHJcblxyXG5leHBvcnQgY29uc3QgTmF2QmFySWNvbkFuY2hvciA9IHN0eWxlZC5hPHsgbWVudVNob3duOiBib29sZWFuIH0+YFxyXG4gICR7YmFzZUl0ZW1TdHlsZXN9XHJcbiAgY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLnByaW1hcnl9O1xyXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xyXG5cclxuICA6aG92ZXIge1xyXG4gICAgY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLmhvdmVyfTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLnRpbnR9O1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gIH1cclxuXHJcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtwID0+IHAubWVudVNob3duICYmIHBhbGV0dGUuYWN0aW9uQmx1ZS50aW50fTtcclxuYFxyXG5cclxuY29uc3QgTmF2QmFySWNvbldyYXBwZXIgPSBzdHlsZWQuZGl2PHsgYWxpZ25tZW50PzogSXRlbUFsaWdubWVudCB9PmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBhbGlnbi1zZWxmOiBzdHJldGNoO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgJHtwID0+IHAuYWxpZ25tZW50ID09PSAncmlnaHQnICYmIHB1c2hSaWdodH1cclxuYFxyXG5cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1lbXB0eVxyXG5leHBvcnQgY29uc3QgTmF2QmFySWNvbjogUmVhY3QuRkM8TmF2QmFySWNvblByb3BzPiA9ICh7IGNoaWxkcmVuLCBhbGlnbm1lbnQsIG1lbnUsIG9uQ2xpY2ssIC4uLnJlc3QgfSkgPT4ge1xyXG4gIGNvbnN0IFttZW51U2hvd24sIHNldE1lbnVTaG93bl0gPSB1c2VTdGF0ZShmYWxzZSlcclxuICBjb25zdCBoYXNNZW51ID0gISFtZW51XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZURvY3VtZW50Q2xpY2soKSB7XHJcbiAgICBpZiAobWVudVNob3duKSB7XHJcbiAgICAgIHNldE1lbnVTaG93bihmYWxzZSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAobWVudVNob3duKSB7XHJcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlRG9jdW1lbnRDbGljaylcclxuICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZURvY3VtZW50Q2xpY2spXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVyblxyXG4gIH0pXHJcblxyXG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEFuY2hvckVsZW1lbnQ+KSA9PiB7XHJcbiAgICBpZiAoaGFzTWVudSkge1xyXG4gICAgICBzZXRNZW51U2hvd24oIW1lbnVTaG93bilcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChvbkNsaWNrKSB7XHJcbiAgICAgICAgb25DbGljayhlKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPE5hdkJhckljb25XcmFwcGVyIGFsaWdubWVudD17YWxpZ25tZW50fT5cclxuICAgICAgPE5hdkJhckljb25BbmNob3IgbWVudVNob3duPXttZW51U2hvd259IG9uQ2xpY2s9e2hhbmRsZUNsaWNrfSB7Li4ucmVzdH0+XHJcbiAgICAgICAge2NoaWxkcmVufVxyXG4gICAgICA8L05hdkJhckljb25BbmNob3I+XHJcbiAgICAgIHtoYXNNZW51ICYmIG1lbnVTaG93biAmJiA8TmF2QmFyRHJvcGRvd24gb25DbGljaz17KCkgPT4gc2V0TWVudVNob3duKGZhbHNlKX0+e21lbnV9PC9OYXZCYXJEcm9wZG93bj59XHJcbiAgICA8L05hdkJhckljb25XcmFwcGVyPlxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IE5hdkJhckRyb3Bkb3duID0gc3R5bGVkLmRpdmBcclxuICB6LWluZGV4OiAxO1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIGhlaWdodDogYXV0bztcclxuICB0b3A6IDEwMCU7XHJcbiAgcmlnaHQ6IDA7XHJcbiAgd2lkdGg6IDMwMHB4O1xyXG4gIGN1cnNvcjogZGVmYXVsdDtcclxuYFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTmF2QmFyXHJcbiJdfQ== */"));

var NavBar = function NavBar(_ref) {
  var href = _ref.href,
      className = _ref.className,
      showLogo = _ref.showLogo,
      children = _ref.children,
      rest = _objectWithoutProperties(_ref, ["href", "className", "showLogo", "children"]);

  return ___EmotionJSX(NavBarContainer, _extends({
    className: className,
    "data-testid": "NavBar"
  }, rest), showLogo && ___EmotionJSX("a", {
    href: href
  }, ___EmotionJSX(DFDSLogo, null)), children);
};

NavBar.defaultProps = {
  showLogo: true,
  href: '/'
};

var baseItemStyles =
/*#__PURE__*/
_css("display:flex;position:relative;align-self:stretch;align-items:center;text-decoration:none;padding:0 1.5rem;color:", palette.textGrey.primary, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9uYXYtYmFyL05hdkJhci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNEQwQiIsImZpbGUiOiIuLi8uLi9zcmMvbmF2LWJhci9OYXZCYXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXHJcbmltcG9ydCB7IHBhbGV0dGUgfSBmcm9tICdAZGZkcy1zaGFyZWQvY29sb3JzJ1xyXG5pbXBvcnQgTG9nbyBmcm9tICcuLi9sb2dvL0xvZ28nXHJcbmltcG9ydCBjc3MgZnJvbSAnQGVtb3Rpb24vY3NzJ1xyXG5pbXBvcnQgeyBtZWRpYSB9IGZyb20gJy4uL3N0eWxlcy9tZWRpYSdcclxuaW1wb3J0IHsgcmVtIH0gZnJvbSAnLi4vc3R5bGVzL3JlbSdcclxuXHJcbnR5cGUgSXRlbUFsaWdubWVudCA9ICdsZWZ0JyB8ICdyaWdodCdcclxuXHJcbnR5cGUgTmF2QmFyUHJvcHMgPSB7XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nXHJcbiAgc2hvd0xvZ28/OiBib29sZWFuXHJcbiAgaHJlZj86IHN0cmluZ1xyXG59XHJcblxyXG50eXBlIEl0ZW1Qcm9wcyA9IHtcclxuICBocmVmOiBzdHJpbmdcclxuICBjbGFzc05hbWU/OiBzdHJpbmdcclxuICBhbGlnbm1lbnQ/OiBJdGVtQWxpZ25tZW50XHJcbiAgc2VsZWN0ZWQ/OiBib29sZWFuXHJcbn1cclxuXHJcbmNvbnN0IERGRFNMb2dvID0gc3R5bGVkKExvZ28pYFxyXG4gIGhlaWdodDogJHtyZW0oMzIpfTtcclxuICB3aWR0aDogJHtyZW0oMTEyKX07XHJcbiAgbWFyZ2luLXJpZ2h0OiAke3JlbSgyMCl9O1xyXG5gXHJcblxyXG5jb25zdCBOYXZCYXJDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGJhY2tncm91bmQtY29sb3I6ICR7cGFsZXR0ZS53aGl0ZS5wcmltYXJ5fTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgbWluLWhlaWdodDogJHtyZW0oNjApfTtcclxuICAvKiBJRSBmbGV4Ym94IG1pbi1oZWlnaHQgZml4ICovXHJcbiAgOmFmdGVyIHtcclxuICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgbWluLWhlaWdodDogaW5oZXJpdDtcclxuICAgIGZvbnQtc2l6ZTogMDtcclxuICB9XHJcbmBcclxuXHJcbmNvbnN0IE5hdkJhcjogUmVhY3QuRkM8TmF2QmFyUHJvcHM+ID0gKHsgaHJlZiwgY2xhc3NOYW1lLCBzaG93TG9nbywgY2hpbGRyZW4sIC4uLnJlc3QgfSkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8TmF2QmFyQ29udGFpbmVyIGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBkYXRhLXRlc3RpZD1cIk5hdkJhclwiIHsuLi5yZXN0fT5cclxuICAgICAge3Nob3dMb2dvICYmIChcclxuICAgICAgICA8YSBocmVmPXtocmVmfT5cclxuICAgICAgICAgIDxERkRTTG9nbyAvPlxyXG4gICAgICAgIDwvYT5cclxuICAgICAgKX1cclxuICAgICAge2NoaWxkcmVufVxyXG4gICAgPC9OYXZCYXJDb250YWluZXI+XHJcbiAgKVxyXG59XHJcblxyXG5OYXZCYXIuZGVmYXVsdFByb3BzID0ge1xyXG4gIHNob3dMb2dvOiB0cnVlLFxyXG4gIGhyZWY6ICcvJyxcclxufVxyXG5cclxuY29uc3QgYmFzZUl0ZW1TdHlsZXMgPSBjc3NgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgYWxpZ24tc2VsZjogc3RyZXRjaDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICBwYWRkaW5nOiAwIDEuNXJlbTtcclxuICBjb2xvcjogJHtwYWxldHRlLnRleHRHcmV5LnByaW1hcnl9O1xyXG5gXHJcblxyXG5jb25zdCBJdGVtQW5jaG9yID0gc3R5bGVkLmE8eyBhbGlnbm1lbnQ/OiBJdGVtQWxpZ25tZW50OyBzZWxlY3RlZD86IGJvb2xlYW4gfT5gXHJcbiAgJHtiYXNlSXRlbVN0eWxlc31cclxuICBjb2xvcjogJHtwYWxldHRlLmdyb3VwQmx1ZS5wcmltYXJ5fTtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke3AgPT4gKHAuc2VsZWN0ZWQgPyBwYWxldHRlLmFjdGlvbkJsdWUubGlnaHQgOiAndHJhbnNwYXJlbnQnKX07XHJcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAke3BhbGV0dGUuYWN0aW9uQmx1ZS5saWdodH07XHJcbiAgZm9udC1zaXplOiAxcmVtO1xyXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcblxyXG4gIDpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3BhbGV0dGUuYWN0aW9uQmx1ZS50aW50fTtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICB9XHJcblxyXG4gIHRyYW5zZm9ybTogc2tld1goLTMwZGVnKTtcclxuICBzcGFuIHtcclxuICAgIHRyYW5zZm9ybTogc2tld1goMzBkZWcpO1xyXG4gIH1cclxuXHJcbiAgJHttZWRpYS5sdCgnbWQnKX0ge1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICB9XHJcbmBcclxuXHJcbi8vIFRPRE86IGNvbnNpZGVyIHVzaW5nIGZvcndhcmRSZWZcclxuZXhwb3J0IGNvbnN0IE5hdkJhckl0ZW06IFJlYWN0LkZDPEl0ZW1Qcm9wcz4gPSAoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBocmVmLCAuLi5yZXN0IH0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPEl0ZW1BbmNob3IgaHJlZj17aHJlZn0gY2xhc3NOYW1lPXtjbGFzc05hbWV9IHsuLi5yZXN0fT5cclxuICAgICAgPHNwYW4+e2NoaWxkcmVufTwvc3Bhbj5cclxuICAgIDwvSXRlbUFuY2hvcj5cclxuICApXHJcbn1cclxuXHJcbmNvbnN0IHB1c2hSaWdodCA9IGNzc2BcclxuICBtYXJnaW4tbGVmdDogYXV0bztcclxuICAmIH4gJiB7XHJcbiAgICBtYXJnaW4tbGVmdDogMDtcclxuICB9XHJcbmBcclxudHlwZSBOYXZCYXJJY29uUHJvcHMgPSBSZWFjdC5BbmNob3JIVE1MQXR0cmlidXRlczxIVE1MQW5jaG9yRWxlbWVudD4gJlxyXG4gIEl0ZW1Qcm9wcyAmIHsgbWVudT86IFJlYWN0LlJlYWN0Tm9kZTsgb25DbGljaz86IFJlYWN0Lk1vdXNlRXZlbnRIYW5kbGVyPEhUTUxBbmNob3JFbGVtZW50PiB9XHJcblxyXG5leHBvcnQgY29uc3QgTmF2QmFySWNvbkFuY2hvciA9IHN0eWxlZC5hPHsgbWVudVNob3duOiBib29sZWFuIH0+YFxyXG4gICR7YmFzZUl0ZW1TdHlsZXN9XHJcbiAgY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLnByaW1hcnl9O1xyXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xyXG5cclxuICA6aG92ZXIge1xyXG4gICAgY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLmhvdmVyfTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLnRpbnR9O1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gIH1cclxuXHJcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtwID0+IHAubWVudVNob3duICYmIHBhbGV0dGUuYWN0aW9uQmx1ZS50aW50fTtcclxuYFxyXG5cclxuY29uc3QgTmF2QmFySWNvbldyYXBwZXIgPSBzdHlsZWQuZGl2PHsgYWxpZ25tZW50PzogSXRlbUFsaWdubWVudCB9PmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBhbGlnbi1zZWxmOiBzdHJldGNoO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgJHtwID0+IHAuYWxpZ25tZW50ID09PSAncmlnaHQnICYmIHB1c2hSaWdodH1cclxuYFxyXG5cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1lbXB0eVxyXG5leHBvcnQgY29uc3QgTmF2QmFySWNvbjogUmVhY3QuRkM8TmF2QmFySWNvblByb3BzPiA9ICh7IGNoaWxkcmVuLCBhbGlnbm1lbnQsIG1lbnUsIG9uQ2xpY2ssIC4uLnJlc3QgfSkgPT4ge1xyXG4gIGNvbnN0IFttZW51U2hvd24sIHNldE1lbnVTaG93bl0gPSB1c2VTdGF0ZShmYWxzZSlcclxuICBjb25zdCBoYXNNZW51ID0gISFtZW51XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZURvY3VtZW50Q2xpY2soKSB7XHJcbiAgICBpZiAobWVudVNob3duKSB7XHJcbiAgICAgIHNldE1lbnVTaG93bihmYWxzZSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAobWVudVNob3duKSB7XHJcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlRG9jdW1lbnRDbGljaylcclxuICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZURvY3VtZW50Q2xpY2spXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVyblxyXG4gIH0pXHJcblxyXG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEFuY2hvckVsZW1lbnQ+KSA9PiB7XHJcbiAgICBpZiAoaGFzTWVudSkge1xyXG4gICAgICBzZXRNZW51U2hvd24oIW1lbnVTaG93bilcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChvbkNsaWNrKSB7XHJcbiAgICAgICAgb25DbGljayhlKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPE5hdkJhckljb25XcmFwcGVyIGFsaWdubWVudD17YWxpZ25tZW50fT5cclxuICAgICAgPE5hdkJhckljb25BbmNob3IgbWVudVNob3duPXttZW51U2hvd259IG9uQ2xpY2s9e2hhbmRsZUNsaWNrfSB7Li4ucmVzdH0+XHJcbiAgICAgICAge2NoaWxkcmVufVxyXG4gICAgICA8L05hdkJhckljb25BbmNob3I+XHJcbiAgICAgIHtoYXNNZW51ICYmIG1lbnVTaG93biAmJiA8TmF2QmFyRHJvcGRvd24gb25DbGljaz17KCkgPT4gc2V0TWVudVNob3duKGZhbHNlKX0+e21lbnV9PC9OYXZCYXJEcm9wZG93bj59XHJcbiAgICA8L05hdkJhckljb25XcmFwcGVyPlxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IE5hdkJhckRyb3Bkb3duID0gc3R5bGVkLmRpdmBcclxuICB6LWluZGV4OiAxO1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIGhlaWdodDogYXV0bztcclxuICB0b3A6IDEwMCU7XHJcbiAgcmlnaHQ6IDA7XHJcbiAgd2lkdGg6IDMwMHB4O1xyXG4gIGN1cnNvcjogZGVmYXVsdDtcclxuYFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTmF2QmFyXHJcbiJdfQ== */"));

var ItemAnchor = _styled("a", {
  target: "emu4ai42"
})(baseItemStyles, " color:", palette.groupBlue.primary, ";background-color:", function (p) {
  return p.selected ? palette.actionBlue.light : 'transparent';
}, ";border-left:1px solid ", palette.actionBlue.light, ";font-size:1rem;font-weight:normal;:hover{background-color:", palette.actionBlue.tint, ";text-decoration:none;}transform:skewX(-30deg);span{transform:skewX(30deg);}", media.lt('md'), "{display:none;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9uYXYtYmFyL05hdkJhci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0U4RSIsImZpbGUiOiIuLi8uLi9zcmMvbmF2LWJhci9OYXZCYXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXHJcbmltcG9ydCB7IHBhbGV0dGUgfSBmcm9tICdAZGZkcy1zaGFyZWQvY29sb3JzJ1xyXG5pbXBvcnQgTG9nbyBmcm9tICcuLi9sb2dvL0xvZ28nXHJcbmltcG9ydCBjc3MgZnJvbSAnQGVtb3Rpb24vY3NzJ1xyXG5pbXBvcnQgeyBtZWRpYSB9IGZyb20gJy4uL3N0eWxlcy9tZWRpYSdcclxuaW1wb3J0IHsgcmVtIH0gZnJvbSAnLi4vc3R5bGVzL3JlbSdcclxuXHJcbnR5cGUgSXRlbUFsaWdubWVudCA9ICdsZWZ0JyB8ICdyaWdodCdcclxuXHJcbnR5cGUgTmF2QmFyUHJvcHMgPSB7XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nXHJcbiAgc2hvd0xvZ28/OiBib29sZWFuXHJcbiAgaHJlZj86IHN0cmluZ1xyXG59XHJcblxyXG50eXBlIEl0ZW1Qcm9wcyA9IHtcclxuICBocmVmOiBzdHJpbmdcclxuICBjbGFzc05hbWU/OiBzdHJpbmdcclxuICBhbGlnbm1lbnQ/OiBJdGVtQWxpZ25tZW50XHJcbiAgc2VsZWN0ZWQ/OiBib29sZWFuXHJcbn1cclxuXHJcbmNvbnN0IERGRFNMb2dvID0gc3R5bGVkKExvZ28pYFxyXG4gIGhlaWdodDogJHtyZW0oMzIpfTtcclxuICB3aWR0aDogJHtyZW0oMTEyKX07XHJcbiAgbWFyZ2luLXJpZ2h0OiAke3JlbSgyMCl9O1xyXG5gXHJcblxyXG5jb25zdCBOYXZCYXJDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGJhY2tncm91bmQtY29sb3I6ICR7cGFsZXR0ZS53aGl0ZS5wcmltYXJ5fTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgbWluLWhlaWdodDogJHtyZW0oNjApfTtcclxuICAvKiBJRSBmbGV4Ym94IG1pbi1oZWlnaHQgZml4ICovXHJcbiAgOmFmdGVyIHtcclxuICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgbWluLWhlaWdodDogaW5oZXJpdDtcclxuICAgIGZvbnQtc2l6ZTogMDtcclxuICB9XHJcbmBcclxuXHJcbmNvbnN0IE5hdkJhcjogUmVhY3QuRkM8TmF2QmFyUHJvcHM+ID0gKHsgaHJlZiwgY2xhc3NOYW1lLCBzaG93TG9nbywgY2hpbGRyZW4sIC4uLnJlc3QgfSkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8TmF2QmFyQ29udGFpbmVyIGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBkYXRhLXRlc3RpZD1cIk5hdkJhclwiIHsuLi5yZXN0fT5cclxuICAgICAge3Nob3dMb2dvICYmIChcclxuICAgICAgICA8YSBocmVmPXtocmVmfT5cclxuICAgICAgICAgIDxERkRTTG9nbyAvPlxyXG4gICAgICAgIDwvYT5cclxuICAgICAgKX1cclxuICAgICAge2NoaWxkcmVufVxyXG4gICAgPC9OYXZCYXJDb250YWluZXI+XHJcbiAgKVxyXG59XHJcblxyXG5OYXZCYXIuZGVmYXVsdFByb3BzID0ge1xyXG4gIHNob3dMb2dvOiB0cnVlLFxyXG4gIGhyZWY6ICcvJyxcclxufVxyXG5cclxuY29uc3QgYmFzZUl0ZW1TdHlsZXMgPSBjc3NgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgYWxpZ24tc2VsZjogc3RyZXRjaDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICBwYWRkaW5nOiAwIDEuNXJlbTtcclxuICBjb2xvcjogJHtwYWxldHRlLnRleHRHcmV5LnByaW1hcnl9O1xyXG5gXHJcblxyXG5jb25zdCBJdGVtQW5jaG9yID0gc3R5bGVkLmE8eyBhbGlnbm1lbnQ/OiBJdGVtQWxpZ25tZW50OyBzZWxlY3RlZD86IGJvb2xlYW4gfT5gXHJcbiAgJHtiYXNlSXRlbVN0eWxlc31cclxuICBjb2xvcjogJHtwYWxldHRlLmdyb3VwQmx1ZS5wcmltYXJ5fTtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke3AgPT4gKHAuc2VsZWN0ZWQgPyBwYWxldHRlLmFjdGlvbkJsdWUubGlnaHQgOiAndHJhbnNwYXJlbnQnKX07XHJcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAke3BhbGV0dGUuYWN0aW9uQmx1ZS5saWdodH07XHJcbiAgZm9udC1zaXplOiAxcmVtO1xyXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcblxyXG4gIDpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3BhbGV0dGUuYWN0aW9uQmx1ZS50aW50fTtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICB9XHJcblxyXG4gIHRyYW5zZm9ybTogc2tld1goLTMwZGVnKTtcclxuICBzcGFuIHtcclxuICAgIHRyYW5zZm9ybTogc2tld1goMzBkZWcpO1xyXG4gIH1cclxuXHJcbiAgJHttZWRpYS5sdCgnbWQnKX0ge1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICB9XHJcbmBcclxuXHJcbi8vIFRPRE86IGNvbnNpZGVyIHVzaW5nIGZvcndhcmRSZWZcclxuZXhwb3J0IGNvbnN0IE5hdkJhckl0ZW06IFJlYWN0LkZDPEl0ZW1Qcm9wcz4gPSAoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBocmVmLCAuLi5yZXN0IH0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPEl0ZW1BbmNob3IgaHJlZj17aHJlZn0gY2xhc3NOYW1lPXtjbGFzc05hbWV9IHsuLi5yZXN0fT5cclxuICAgICAgPHNwYW4+e2NoaWxkcmVufTwvc3Bhbj5cclxuICAgIDwvSXRlbUFuY2hvcj5cclxuICApXHJcbn1cclxuXHJcbmNvbnN0IHB1c2hSaWdodCA9IGNzc2BcclxuICBtYXJnaW4tbGVmdDogYXV0bztcclxuICAmIH4gJiB7XHJcbiAgICBtYXJnaW4tbGVmdDogMDtcclxuICB9XHJcbmBcclxudHlwZSBOYXZCYXJJY29uUHJvcHMgPSBSZWFjdC5BbmNob3JIVE1MQXR0cmlidXRlczxIVE1MQW5jaG9yRWxlbWVudD4gJlxyXG4gIEl0ZW1Qcm9wcyAmIHsgbWVudT86IFJlYWN0LlJlYWN0Tm9kZTsgb25DbGljaz86IFJlYWN0Lk1vdXNlRXZlbnRIYW5kbGVyPEhUTUxBbmNob3JFbGVtZW50PiB9XHJcblxyXG5leHBvcnQgY29uc3QgTmF2QmFySWNvbkFuY2hvciA9IHN0eWxlZC5hPHsgbWVudVNob3duOiBib29sZWFuIH0+YFxyXG4gICR7YmFzZUl0ZW1TdHlsZXN9XHJcbiAgY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLnByaW1hcnl9O1xyXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xyXG5cclxuICA6aG92ZXIge1xyXG4gICAgY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLmhvdmVyfTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLnRpbnR9O1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gIH1cclxuXHJcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtwID0+IHAubWVudVNob3duICYmIHBhbGV0dGUuYWN0aW9uQmx1ZS50aW50fTtcclxuYFxyXG5cclxuY29uc3QgTmF2QmFySWNvbldyYXBwZXIgPSBzdHlsZWQuZGl2PHsgYWxpZ25tZW50PzogSXRlbUFsaWdubWVudCB9PmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBhbGlnbi1zZWxmOiBzdHJldGNoO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgJHtwID0+IHAuYWxpZ25tZW50ID09PSAncmlnaHQnICYmIHB1c2hSaWdodH1cclxuYFxyXG5cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1lbXB0eVxyXG5leHBvcnQgY29uc3QgTmF2QmFySWNvbjogUmVhY3QuRkM8TmF2QmFySWNvblByb3BzPiA9ICh7IGNoaWxkcmVuLCBhbGlnbm1lbnQsIG1lbnUsIG9uQ2xpY2ssIC4uLnJlc3QgfSkgPT4ge1xyXG4gIGNvbnN0IFttZW51U2hvd24sIHNldE1lbnVTaG93bl0gPSB1c2VTdGF0ZShmYWxzZSlcclxuICBjb25zdCBoYXNNZW51ID0gISFtZW51XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZURvY3VtZW50Q2xpY2soKSB7XHJcbiAgICBpZiAobWVudVNob3duKSB7XHJcbiAgICAgIHNldE1lbnVTaG93bihmYWxzZSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAobWVudVNob3duKSB7XHJcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlRG9jdW1lbnRDbGljaylcclxuICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZURvY3VtZW50Q2xpY2spXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVyblxyXG4gIH0pXHJcblxyXG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEFuY2hvckVsZW1lbnQ+KSA9PiB7XHJcbiAgICBpZiAoaGFzTWVudSkge1xyXG4gICAgICBzZXRNZW51U2hvd24oIW1lbnVTaG93bilcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChvbkNsaWNrKSB7XHJcbiAgICAgICAgb25DbGljayhlKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPE5hdkJhckljb25XcmFwcGVyIGFsaWdubWVudD17YWxpZ25tZW50fT5cclxuICAgICAgPE5hdkJhckljb25BbmNob3IgbWVudVNob3duPXttZW51U2hvd259IG9uQ2xpY2s9e2hhbmRsZUNsaWNrfSB7Li4ucmVzdH0+XHJcbiAgICAgICAge2NoaWxkcmVufVxyXG4gICAgICA8L05hdkJhckljb25BbmNob3I+XHJcbiAgICAgIHtoYXNNZW51ICYmIG1lbnVTaG93biAmJiA8TmF2QmFyRHJvcGRvd24gb25DbGljaz17KCkgPT4gc2V0TWVudVNob3duKGZhbHNlKX0+e21lbnV9PC9OYXZCYXJEcm9wZG93bj59XHJcbiAgICA8L05hdkJhckljb25XcmFwcGVyPlxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IE5hdkJhckRyb3Bkb3duID0gc3R5bGVkLmRpdmBcclxuICB6LWluZGV4OiAxO1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIGhlaWdodDogYXV0bztcclxuICB0b3A6IDEwMCU7XHJcbiAgcmlnaHQ6IDA7XHJcbiAgd2lkdGg6IDMwMHB4O1xyXG4gIGN1cnNvcjogZGVmYXVsdDtcclxuYFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTmF2QmFyXHJcbiJdfQ== */")); // TODO: consider using forwardRef


export var NavBarItem = function NavBarItem(_ref2) {
  var children = _ref2.children,
      className = _ref2.className,
      href = _ref2.href,
      rest = _objectWithoutProperties(_ref2, ["children", "className", "href"]);

  return ___EmotionJSX(ItemAnchor, _extends({
    href: href,
    className: className
  }, rest), ___EmotionJSX("span", null, children));
};
var pushRight = process.env.NODE_ENV === "production" ? {
  name: "1f5urha",
  styles: "margin-left:auto;& ~ &{margin-left:0;}"
} : {
  name: "1f5urha",
  styles: "margin-left:auto;& ~ &{margin-left:0;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9uYXYtYmFyL05hdkJhci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0dxQiIsImZpbGUiOiIuLi8uLi9zcmMvbmF2LWJhci9OYXZCYXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXHJcbmltcG9ydCB7IHBhbGV0dGUgfSBmcm9tICdAZGZkcy1zaGFyZWQvY29sb3JzJ1xyXG5pbXBvcnQgTG9nbyBmcm9tICcuLi9sb2dvL0xvZ28nXHJcbmltcG9ydCBjc3MgZnJvbSAnQGVtb3Rpb24vY3NzJ1xyXG5pbXBvcnQgeyBtZWRpYSB9IGZyb20gJy4uL3N0eWxlcy9tZWRpYSdcclxuaW1wb3J0IHsgcmVtIH0gZnJvbSAnLi4vc3R5bGVzL3JlbSdcclxuXHJcbnR5cGUgSXRlbUFsaWdubWVudCA9ICdsZWZ0JyB8ICdyaWdodCdcclxuXHJcbnR5cGUgTmF2QmFyUHJvcHMgPSB7XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nXHJcbiAgc2hvd0xvZ28/OiBib29sZWFuXHJcbiAgaHJlZj86IHN0cmluZ1xyXG59XHJcblxyXG50eXBlIEl0ZW1Qcm9wcyA9IHtcclxuICBocmVmOiBzdHJpbmdcclxuICBjbGFzc05hbWU/OiBzdHJpbmdcclxuICBhbGlnbm1lbnQ/OiBJdGVtQWxpZ25tZW50XHJcbiAgc2VsZWN0ZWQ/OiBib29sZWFuXHJcbn1cclxuXHJcbmNvbnN0IERGRFNMb2dvID0gc3R5bGVkKExvZ28pYFxyXG4gIGhlaWdodDogJHtyZW0oMzIpfTtcclxuICB3aWR0aDogJHtyZW0oMTEyKX07XHJcbiAgbWFyZ2luLXJpZ2h0OiAke3JlbSgyMCl9O1xyXG5gXHJcblxyXG5jb25zdCBOYXZCYXJDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGJhY2tncm91bmQtY29sb3I6ICR7cGFsZXR0ZS53aGl0ZS5wcmltYXJ5fTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgbWluLWhlaWdodDogJHtyZW0oNjApfTtcclxuICAvKiBJRSBmbGV4Ym94IG1pbi1oZWlnaHQgZml4ICovXHJcbiAgOmFmdGVyIHtcclxuICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgbWluLWhlaWdodDogaW5oZXJpdDtcclxuICAgIGZvbnQtc2l6ZTogMDtcclxuICB9XHJcbmBcclxuXHJcbmNvbnN0IE5hdkJhcjogUmVhY3QuRkM8TmF2QmFyUHJvcHM+ID0gKHsgaHJlZiwgY2xhc3NOYW1lLCBzaG93TG9nbywgY2hpbGRyZW4sIC4uLnJlc3QgfSkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8TmF2QmFyQ29udGFpbmVyIGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBkYXRhLXRlc3RpZD1cIk5hdkJhclwiIHsuLi5yZXN0fT5cclxuICAgICAge3Nob3dMb2dvICYmIChcclxuICAgICAgICA8YSBocmVmPXtocmVmfT5cclxuICAgICAgICAgIDxERkRTTG9nbyAvPlxyXG4gICAgICAgIDwvYT5cclxuICAgICAgKX1cclxuICAgICAge2NoaWxkcmVufVxyXG4gICAgPC9OYXZCYXJDb250YWluZXI+XHJcbiAgKVxyXG59XHJcblxyXG5OYXZCYXIuZGVmYXVsdFByb3BzID0ge1xyXG4gIHNob3dMb2dvOiB0cnVlLFxyXG4gIGhyZWY6ICcvJyxcclxufVxyXG5cclxuY29uc3QgYmFzZUl0ZW1TdHlsZXMgPSBjc3NgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgYWxpZ24tc2VsZjogc3RyZXRjaDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICBwYWRkaW5nOiAwIDEuNXJlbTtcclxuICBjb2xvcjogJHtwYWxldHRlLnRleHRHcmV5LnByaW1hcnl9O1xyXG5gXHJcblxyXG5jb25zdCBJdGVtQW5jaG9yID0gc3R5bGVkLmE8eyBhbGlnbm1lbnQ/OiBJdGVtQWxpZ25tZW50OyBzZWxlY3RlZD86IGJvb2xlYW4gfT5gXHJcbiAgJHtiYXNlSXRlbVN0eWxlc31cclxuICBjb2xvcjogJHtwYWxldHRlLmdyb3VwQmx1ZS5wcmltYXJ5fTtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke3AgPT4gKHAuc2VsZWN0ZWQgPyBwYWxldHRlLmFjdGlvbkJsdWUubGlnaHQgOiAndHJhbnNwYXJlbnQnKX07XHJcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAke3BhbGV0dGUuYWN0aW9uQmx1ZS5saWdodH07XHJcbiAgZm9udC1zaXplOiAxcmVtO1xyXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcblxyXG4gIDpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3BhbGV0dGUuYWN0aW9uQmx1ZS50aW50fTtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICB9XHJcblxyXG4gIHRyYW5zZm9ybTogc2tld1goLTMwZGVnKTtcclxuICBzcGFuIHtcclxuICAgIHRyYW5zZm9ybTogc2tld1goMzBkZWcpO1xyXG4gIH1cclxuXHJcbiAgJHttZWRpYS5sdCgnbWQnKX0ge1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICB9XHJcbmBcclxuXHJcbi8vIFRPRE86IGNvbnNpZGVyIHVzaW5nIGZvcndhcmRSZWZcclxuZXhwb3J0IGNvbnN0IE5hdkJhckl0ZW06IFJlYWN0LkZDPEl0ZW1Qcm9wcz4gPSAoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBocmVmLCAuLi5yZXN0IH0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPEl0ZW1BbmNob3IgaHJlZj17aHJlZn0gY2xhc3NOYW1lPXtjbGFzc05hbWV9IHsuLi5yZXN0fT5cclxuICAgICAgPHNwYW4+e2NoaWxkcmVufTwvc3Bhbj5cclxuICAgIDwvSXRlbUFuY2hvcj5cclxuICApXHJcbn1cclxuXHJcbmNvbnN0IHB1c2hSaWdodCA9IGNzc2BcclxuICBtYXJnaW4tbGVmdDogYXV0bztcclxuICAmIH4gJiB7XHJcbiAgICBtYXJnaW4tbGVmdDogMDtcclxuICB9XHJcbmBcclxudHlwZSBOYXZCYXJJY29uUHJvcHMgPSBSZWFjdC5BbmNob3JIVE1MQXR0cmlidXRlczxIVE1MQW5jaG9yRWxlbWVudD4gJlxyXG4gIEl0ZW1Qcm9wcyAmIHsgbWVudT86IFJlYWN0LlJlYWN0Tm9kZTsgb25DbGljaz86IFJlYWN0Lk1vdXNlRXZlbnRIYW5kbGVyPEhUTUxBbmNob3JFbGVtZW50PiB9XHJcblxyXG5leHBvcnQgY29uc3QgTmF2QmFySWNvbkFuY2hvciA9IHN0eWxlZC5hPHsgbWVudVNob3duOiBib29sZWFuIH0+YFxyXG4gICR7YmFzZUl0ZW1TdHlsZXN9XHJcbiAgY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLnByaW1hcnl9O1xyXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xyXG5cclxuICA6aG92ZXIge1xyXG4gICAgY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLmhvdmVyfTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLnRpbnR9O1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gIH1cclxuXHJcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtwID0+IHAubWVudVNob3duICYmIHBhbGV0dGUuYWN0aW9uQmx1ZS50aW50fTtcclxuYFxyXG5cclxuY29uc3QgTmF2QmFySWNvbldyYXBwZXIgPSBzdHlsZWQuZGl2PHsgYWxpZ25tZW50PzogSXRlbUFsaWdubWVudCB9PmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBhbGlnbi1zZWxmOiBzdHJldGNoO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgJHtwID0+IHAuYWxpZ25tZW50ID09PSAncmlnaHQnICYmIHB1c2hSaWdodH1cclxuYFxyXG5cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1lbXB0eVxyXG5leHBvcnQgY29uc3QgTmF2QmFySWNvbjogUmVhY3QuRkM8TmF2QmFySWNvblByb3BzPiA9ICh7IGNoaWxkcmVuLCBhbGlnbm1lbnQsIG1lbnUsIG9uQ2xpY2ssIC4uLnJlc3QgfSkgPT4ge1xyXG4gIGNvbnN0IFttZW51U2hvd24sIHNldE1lbnVTaG93bl0gPSB1c2VTdGF0ZShmYWxzZSlcclxuICBjb25zdCBoYXNNZW51ID0gISFtZW51XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZURvY3VtZW50Q2xpY2soKSB7XHJcbiAgICBpZiAobWVudVNob3duKSB7XHJcbiAgICAgIHNldE1lbnVTaG93bihmYWxzZSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAobWVudVNob3duKSB7XHJcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlRG9jdW1lbnRDbGljaylcclxuICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZURvY3VtZW50Q2xpY2spXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVyblxyXG4gIH0pXHJcblxyXG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEFuY2hvckVsZW1lbnQ+KSA9PiB7XHJcbiAgICBpZiAoaGFzTWVudSkge1xyXG4gICAgICBzZXRNZW51U2hvd24oIW1lbnVTaG93bilcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChvbkNsaWNrKSB7XHJcbiAgICAgICAgb25DbGljayhlKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPE5hdkJhckljb25XcmFwcGVyIGFsaWdubWVudD17YWxpZ25tZW50fT5cclxuICAgICAgPE5hdkJhckljb25BbmNob3IgbWVudVNob3duPXttZW51U2hvd259IG9uQ2xpY2s9e2hhbmRsZUNsaWNrfSB7Li4ucmVzdH0+XHJcbiAgICAgICAge2NoaWxkcmVufVxyXG4gICAgICA8L05hdkJhckljb25BbmNob3I+XHJcbiAgICAgIHtoYXNNZW51ICYmIG1lbnVTaG93biAmJiA8TmF2QmFyRHJvcGRvd24gb25DbGljaz17KCkgPT4gc2V0TWVudVNob3duKGZhbHNlKX0+e21lbnV9PC9OYXZCYXJEcm9wZG93bj59XHJcbiAgICA8L05hdkJhckljb25XcmFwcGVyPlxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IE5hdkJhckRyb3Bkb3duID0gc3R5bGVkLmRpdmBcclxuICB6LWluZGV4OiAxO1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIGhlaWdodDogYXV0bztcclxuICB0b3A6IDEwMCU7XHJcbiAgcmlnaHQ6IDA7XHJcbiAgd2lkdGg6IDMwMHB4O1xyXG4gIGN1cnNvcjogZGVmYXVsdDtcclxuYFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTmF2QmFyXHJcbiJdfQ== */"
};
export var NavBarIconAnchor = _styled("a", {
  target: "emu4ai43"
})(baseItemStyles, " color:", palette.actionBlue.primary, ";font-size:1.5rem;:hover{color:", palette.actionBlue.hover, ";background-color:", palette.actionBlue.tint, ";text-decoration:none;}background-color:", function (p) {
  return p.menuShown && palette.actionBlue.tint;
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9uYXYtYmFyL05hdkJhci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK0dnRSIsImZpbGUiOiIuLi8uLi9zcmMvbmF2LWJhci9OYXZCYXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXHJcbmltcG9ydCB7IHBhbGV0dGUgfSBmcm9tICdAZGZkcy1zaGFyZWQvY29sb3JzJ1xyXG5pbXBvcnQgTG9nbyBmcm9tICcuLi9sb2dvL0xvZ28nXHJcbmltcG9ydCBjc3MgZnJvbSAnQGVtb3Rpb24vY3NzJ1xyXG5pbXBvcnQgeyBtZWRpYSB9IGZyb20gJy4uL3N0eWxlcy9tZWRpYSdcclxuaW1wb3J0IHsgcmVtIH0gZnJvbSAnLi4vc3R5bGVzL3JlbSdcclxuXHJcbnR5cGUgSXRlbUFsaWdubWVudCA9ICdsZWZ0JyB8ICdyaWdodCdcclxuXHJcbnR5cGUgTmF2QmFyUHJvcHMgPSB7XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nXHJcbiAgc2hvd0xvZ28/OiBib29sZWFuXHJcbiAgaHJlZj86IHN0cmluZ1xyXG59XHJcblxyXG50eXBlIEl0ZW1Qcm9wcyA9IHtcclxuICBocmVmOiBzdHJpbmdcclxuICBjbGFzc05hbWU/OiBzdHJpbmdcclxuICBhbGlnbm1lbnQ/OiBJdGVtQWxpZ25tZW50XHJcbiAgc2VsZWN0ZWQ/OiBib29sZWFuXHJcbn1cclxuXHJcbmNvbnN0IERGRFNMb2dvID0gc3R5bGVkKExvZ28pYFxyXG4gIGhlaWdodDogJHtyZW0oMzIpfTtcclxuICB3aWR0aDogJHtyZW0oMTEyKX07XHJcbiAgbWFyZ2luLXJpZ2h0OiAke3JlbSgyMCl9O1xyXG5gXHJcblxyXG5jb25zdCBOYXZCYXJDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGJhY2tncm91bmQtY29sb3I6ICR7cGFsZXR0ZS53aGl0ZS5wcmltYXJ5fTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgbWluLWhlaWdodDogJHtyZW0oNjApfTtcclxuICAvKiBJRSBmbGV4Ym94IG1pbi1oZWlnaHQgZml4ICovXHJcbiAgOmFmdGVyIHtcclxuICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgbWluLWhlaWdodDogaW5oZXJpdDtcclxuICAgIGZvbnQtc2l6ZTogMDtcclxuICB9XHJcbmBcclxuXHJcbmNvbnN0IE5hdkJhcjogUmVhY3QuRkM8TmF2QmFyUHJvcHM+ID0gKHsgaHJlZiwgY2xhc3NOYW1lLCBzaG93TG9nbywgY2hpbGRyZW4sIC4uLnJlc3QgfSkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8TmF2QmFyQ29udGFpbmVyIGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBkYXRhLXRlc3RpZD1cIk5hdkJhclwiIHsuLi5yZXN0fT5cclxuICAgICAge3Nob3dMb2dvICYmIChcclxuICAgICAgICA8YSBocmVmPXtocmVmfT5cclxuICAgICAgICAgIDxERkRTTG9nbyAvPlxyXG4gICAgICAgIDwvYT5cclxuICAgICAgKX1cclxuICAgICAge2NoaWxkcmVufVxyXG4gICAgPC9OYXZCYXJDb250YWluZXI+XHJcbiAgKVxyXG59XHJcblxyXG5OYXZCYXIuZGVmYXVsdFByb3BzID0ge1xyXG4gIHNob3dMb2dvOiB0cnVlLFxyXG4gIGhyZWY6ICcvJyxcclxufVxyXG5cclxuY29uc3QgYmFzZUl0ZW1TdHlsZXMgPSBjc3NgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgYWxpZ24tc2VsZjogc3RyZXRjaDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICBwYWRkaW5nOiAwIDEuNXJlbTtcclxuICBjb2xvcjogJHtwYWxldHRlLnRleHRHcmV5LnByaW1hcnl9O1xyXG5gXHJcblxyXG5jb25zdCBJdGVtQW5jaG9yID0gc3R5bGVkLmE8eyBhbGlnbm1lbnQ/OiBJdGVtQWxpZ25tZW50OyBzZWxlY3RlZD86IGJvb2xlYW4gfT5gXHJcbiAgJHtiYXNlSXRlbVN0eWxlc31cclxuICBjb2xvcjogJHtwYWxldHRlLmdyb3VwQmx1ZS5wcmltYXJ5fTtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke3AgPT4gKHAuc2VsZWN0ZWQgPyBwYWxldHRlLmFjdGlvbkJsdWUubGlnaHQgOiAndHJhbnNwYXJlbnQnKX07XHJcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAke3BhbGV0dGUuYWN0aW9uQmx1ZS5saWdodH07XHJcbiAgZm9udC1zaXplOiAxcmVtO1xyXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcblxyXG4gIDpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3BhbGV0dGUuYWN0aW9uQmx1ZS50aW50fTtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICB9XHJcblxyXG4gIHRyYW5zZm9ybTogc2tld1goLTMwZGVnKTtcclxuICBzcGFuIHtcclxuICAgIHRyYW5zZm9ybTogc2tld1goMzBkZWcpO1xyXG4gIH1cclxuXHJcbiAgJHttZWRpYS5sdCgnbWQnKX0ge1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICB9XHJcbmBcclxuXHJcbi8vIFRPRE86IGNvbnNpZGVyIHVzaW5nIGZvcndhcmRSZWZcclxuZXhwb3J0IGNvbnN0IE5hdkJhckl0ZW06IFJlYWN0LkZDPEl0ZW1Qcm9wcz4gPSAoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBocmVmLCAuLi5yZXN0IH0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPEl0ZW1BbmNob3IgaHJlZj17aHJlZn0gY2xhc3NOYW1lPXtjbGFzc05hbWV9IHsuLi5yZXN0fT5cclxuICAgICAgPHNwYW4+e2NoaWxkcmVufTwvc3Bhbj5cclxuICAgIDwvSXRlbUFuY2hvcj5cclxuICApXHJcbn1cclxuXHJcbmNvbnN0IHB1c2hSaWdodCA9IGNzc2BcclxuICBtYXJnaW4tbGVmdDogYXV0bztcclxuICAmIH4gJiB7XHJcbiAgICBtYXJnaW4tbGVmdDogMDtcclxuICB9XHJcbmBcclxudHlwZSBOYXZCYXJJY29uUHJvcHMgPSBSZWFjdC5BbmNob3JIVE1MQXR0cmlidXRlczxIVE1MQW5jaG9yRWxlbWVudD4gJlxyXG4gIEl0ZW1Qcm9wcyAmIHsgbWVudT86IFJlYWN0LlJlYWN0Tm9kZTsgb25DbGljaz86IFJlYWN0Lk1vdXNlRXZlbnRIYW5kbGVyPEhUTUxBbmNob3JFbGVtZW50PiB9XHJcblxyXG5leHBvcnQgY29uc3QgTmF2QmFySWNvbkFuY2hvciA9IHN0eWxlZC5hPHsgbWVudVNob3duOiBib29sZWFuIH0+YFxyXG4gICR7YmFzZUl0ZW1TdHlsZXN9XHJcbiAgY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLnByaW1hcnl9O1xyXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xyXG5cclxuICA6aG92ZXIge1xyXG4gICAgY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLmhvdmVyfTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLnRpbnR9O1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gIH1cclxuXHJcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtwID0+IHAubWVudVNob3duICYmIHBhbGV0dGUuYWN0aW9uQmx1ZS50aW50fTtcclxuYFxyXG5cclxuY29uc3QgTmF2QmFySWNvbldyYXBwZXIgPSBzdHlsZWQuZGl2PHsgYWxpZ25tZW50PzogSXRlbUFsaWdubWVudCB9PmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBhbGlnbi1zZWxmOiBzdHJldGNoO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgJHtwID0+IHAuYWxpZ25tZW50ID09PSAncmlnaHQnICYmIHB1c2hSaWdodH1cclxuYFxyXG5cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1lbXB0eVxyXG5leHBvcnQgY29uc3QgTmF2QmFySWNvbjogUmVhY3QuRkM8TmF2QmFySWNvblByb3BzPiA9ICh7IGNoaWxkcmVuLCBhbGlnbm1lbnQsIG1lbnUsIG9uQ2xpY2ssIC4uLnJlc3QgfSkgPT4ge1xyXG4gIGNvbnN0IFttZW51U2hvd24sIHNldE1lbnVTaG93bl0gPSB1c2VTdGF0ZShmYWxzZSlcclxuICBjb25zdCBoYXNNZW51ID0gISFtZW51XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZURvY3VtZW50Q2xpY2soKSB7XHJcbiAgICBpZiAobWVudVNob3duKSB7XHJcbiAgICAgIHNldE1lbnVTaG93bihmYWxzZSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAobWVudVNob3duKSB7XHJcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlRG9jdW1lbnRDbGljaylcclxuICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZURvY3VtZW50Q2xpY2spXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVyblxyXG4gIH0pXHJcblxyXG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEFuY2hvckVsZW1lbnQ+KSA9PiB7XHJcbiAgICBpZiAoaGFzTWVudSkge1xyXG4gICAgICBzZXRNZW51U2hvd24oIW1lbnVTaG93bilcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChvbkNsaWNrKSB7XHJcbiAgICAgICAgb25DbGljayhlKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPE5hdkJhckljb25XcmFwcGVyIGFsaWdubWVudD17YWxpZ25tZW50fT5cclxuICAgICAgPE5hdkJhckljb25BbmNob3IgbWVudVNob3duPXttZW51U2hvd259IG9uQ2xpY2s9e2hhbmRsZUNsaWNrfSB7Li4ucmVzdH0+XHJcbiAgICAgICAge2NoaWxkcmVufVxyXG4gICAgICA8L05hdkJhckljb25BbmNob3I+XHJcbiAgICAgIHtoYXNNZW51ICYmIG1lbnVTaG93biAmJiA8TmF2QmFyRHJvcGRvd24gb25DbGljaz17KCkgPT4gc2V0TWVudVNob3duKGZhbHNlKX0+e21lbnV9PC9OYXZCYXJEcm9wZG93bj59XHJcbiAgICA8L05hdkJhckljb25XcmFwcGVyPlxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IE5hdkJhckRyb3Bkb3duID0gc3R5bGVkLmRpdmBcclxuICB6LWluZGV4OiAxO1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIGhlaWdodDogYXV0bztcclxuICB0b3A6IDEwMCU7XHJcbiAgcmlnaHQ6IDA7XHJcbiAgd2lkdGg6IDMwMHB4O1xyXG4gIGN1cnNvcjogZGVmYXVsdDtcclxuYFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTmF2QmFyXHJcbiJdfQ== */"));

var NavBarIconWrapper = _styled("div", {
  target: "emu4ai44"
})("display:flex;position:relative;align-self:stretch;align-items:center;", function (p) {
  return p.alignment === 'right' && pushRight;
}, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9uYXYtYmFyL05hdkJhci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkhtRSIsImZpbGUiOiIuLi8uLi9zcmMvbmF2LWJhci9OYXZCYXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXHJcbmltcG9ydCB7IHBhbGV0dGUgfSBmcm9tICdAZGZkcy1zaGFyZWQvY29sb3JzJ1xyXG5pbXBvcnQgTG9nbyBmcm9tICcuLi9sb2dvL0xvZ28nXHJcbmltcG9ydCBjc3MgZnJvbSAnQGVtb3Rpb24vY3NzJ1xyXG5pbXBvcnQgeyBtZWRpYSB9IGZyb20gJy4uL3N0eWxlcy9tZWRpYSdcclxuaW1wb3J0IHsgcmVtIH0gZnJvbSAnLi4vc3R5bGVzL3JlbSdcclxuXHJcbnR5cGUgSXRlbUFsaWdubWVudCA9ICdsZWZ0JyB8ICdyaWdodCdcclxuXHJcbnR5cGUgTmF2QmFyUHJvcHMgPSB7XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nXHJcbiAgc2hvd0xvZ28/OiBib29sZWFuXHJcbiAgaHJlZj86IHN0cmluZ1xyXG59XHJcblxyXG50eXBlIEl0ZW1Qcm9wcyA9IHtcclxuICBocmVmOiBzdHJpbmdcclxuICBjbGFzc05hbWU/OiBzdHJpbmdcclxuICBhbGlnbm1lbnQ/OiBJdGVtQWxpZ25tZW50XHJcbiAgc2VsZWN0ZWQ/OiBib29sZWFuXHJcbn1cclxuXHJcbmNvbnN0IERGRFNMb2dvID0gc3R5bGVkKExvZ28pYFxyXG4gIGhlaWdodDogJHtyZW0oMzIpfTtcclxuICB3aWR0aDogJHtyZW0oMTEyKX07XHJcbiAgbWFyZ2luLXJpZ2h0OiAke3JlbSgyMCl9O1xyXG5gXHJcblxyXG5jb25zdCBOYXZCYXJDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGJhY2tncm91bmQtY29sb3I6ICR7cGFsZXR0ZS53aGl0ZS5wcmltYXJ5fTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgbWluLWhlaWdodDogJHtyZW0oNjApfTtcclxuICAvKiBJRSBmbGV4Ym94IG1pbi1oZWlnaHQgZml4ICovXHJcbiAgOmFmdGVyIHtcclxuICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgbWluLWhlaWdodDogaW5oZXJpdDtcclxuICAgIGZvbnQtc2l6ZTogMDtcclxuICB9XHJcbmBcclxuXHJcbmNvbnN0IE5hdkJhcjogUmVhY3QuRkM8TmF2QmFyUHJvcHM+ID0gKHsgaHJlZiwgY2xhc3NOYW1lLCBzaG93TG9nbywgY2hpbGRyZW4sIC4uLnJlc3QgfSkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8TmF2QmFyQ29udGFpbmVyIGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBkYXRhLXRlc3RpZD1cIk5hdkJhclwiIHsuLi5yZXN0fT5cclxuICAgICAge3Nob3dMb2dvICYmIChcclxuICAgICAgICA8YSBocmVmPXtocmVmfT5cclxuICAgICAgICAgIDxERkRTTG9nbyAvPlxyXG4gICAgICAgIDwvYT5cclxuICAgICAgKX1cclxuICAgICAge2NoaWxkcmVufVxyXG4gICAgPC9OYXZCYXJDb250YWluZXI+XHJcbiAgKVxyXG59XHJcblxyXG5OYXZCYXIuZGVmYXVsdFByb3BzID0ge1xyXG4gIHNob3dMb2dvOiB0cnVlLFxyXG4gIGhyZWY6ICcvJyxcclxufVxyXG5cclxuY29uc3QgYmFzZUl0ZW1TdHlsZXMgPSBjc3NgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgYWxpZ24tc2VsZjogc3RyZXRjaDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICBwYWRkaW5nOiAwIDEuNXJlbTtcclxuICBjb2xvcjogJHtwYWxldHRlLnRleHRHcmV5LnByaW1hcnl9O1xyXG5gXHJcblxyXG5jb25zdCBJdGVtQW5jaG9yID0gc3R5bGVkLmE8eyBhbGlnbm1lbnQ/OiBJdGVtQWxpZ25tZW50OyBzZWxlY3RlZD86IGJvb2xlYW4gfT5gXHJcbiAgJHtiYXNlSXRlbVN0eWxlc31cclxuICBjb2xvcjogJHtwYWxldHRlLmdyb3VwQmx1ZS5wcmltYXJ5fTtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke3AgPT4gKHAuc2VsZWN0ZWQgPyBwYWxldHRlLmFjdGlvbkJsdWUubGlnaHQgOiAndHJhbnNwYXJlbnQnKX07XHJcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAke3BhbGV0dGUuYWN0aW9uQmx1ZS5saWdodH07XHJcbiAgZm9udC1zaXplOiAxcmVtO1xyXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcblxyXG4gIDpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3BhbGV0dGUuYWN0aW9uQmx1ZS50aW50fTtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICB9XHJcblxyXG4gIHRyYW5zZm9ybTogc2tld1goLTMwZGVnKTtcclxuICBzcGFuIHtcclxuICAgIHRyYW5zZm9ybTogc2tld1goMzBkZWcpO1xyXG4gIH1cclxuXHJcbiAgJHttZWRpYS5sdCgnbWQnKX0ge1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICB9XHJcbmBcclxuXHJcbi8vIFRPRE86IGNvbnNpZGVyIHVzaW5nIGZvcndhcmRSZWZcclxuZXhwb3J0IGNvbnN0IE5hdkJhckl0ZW06IFJlYWN0LkZDPEl0ZW1Qcm9wcz4gPSAoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBocmVmLCAuLi5yZXN0IH0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPEl0ZW1BbmNob3IgaHJlZj17aHJlZn0gY2xhc3NOYW1lPXtjbGFzc05hbWV9IHsuLi5yZXN0fT5cclxuICAgICAgPHNwYW4+e2NoaWxkcmVufTwvc3Bhbj5cclxuICAgIDwvSXRlbUFuY2hvcj5cclxuICApXHJcbn1cclxuXHJcbmNvbnN0IHB1c2hSaWdodCA9IGNzc2BcclxuICBtYXJnaW4tbGVmdDogYXV0bztcclxuICAmIH4gJiB7XHJcbiAgICBtYXJnaW4tbGVmdDogMDtcclxuICB9XHJcbmBcclxudHlwZSBOYXZCYXJJY29uUHJvcHMgPSBSZWFjdC5BbmNob3JIVE1MQXR0cmlidXRlczxIVE1MQW5jaG9yRWxlbWVudD4gJlxyXG4gIEl0ZW1Qcm9wcyAmIHsgbWVudT86IFJlYWN0LlJlYWN0Tm9kZTsgb25DbGljaz86IFJlYWN0Lk1vdXNlRXZlbnRIYW5kbGVyPEhUTUxBbmNob3JFbGVtZW50PiB9XHJcblxyXG5leHBvcnQgY29uc3QgTmF2QmFySWNvbkFuY2hvciA9IHN0eWxlZC5hPHsgbWVudVNob3duOiBib29sZWFuIH0+YFxyXG4gICR7YmFzZUl0ZW1TdHlsZXN9XHJcbiAgY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLnByaW1hcnl9O1xyXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xyXG5cclxuICA6aG92ZXIge1xyXG4gICAgY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLmhvdmVyfTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLnRpbnR9O1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gIH1cclxuXHJcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtwID0+IHAubWVudVNob3duICYmIHBhbGV0dGUuYWN0aW9uQmx1ZS50aW50fTtcclxuYFxyXG5cclxuY29uc3QgTmF2QmFySWNvbldyYXBwZXIgPSBzdHlsZWQuZGl2PHsgYWxpZ25tZW50PzogSXRlbUFsaWdubWVudCB9PmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBhbGlnbi1zZWxmOiBzdHJldGNoO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgJHtwID0+IHAuYWxpZ25tZW50ID09PSAncmlnaHQnICYmIHB1c2hSaWdodH1cclxuYFxyXG5cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1lbXB0eVxyXG5leHBvcnQgY29uc3QgTmF2QmFySWNvbjogUmVhY3QuRkM8TmF2QmFySWNvblByb3BzPiA9ICh7IGNoaWxkcmVuLCBhbGlnbm1lbnQsIG1lbnUsIG9uQ2xpY2ssIC4uLnJlc3QgfSkgPT4ge1xyXG4gIGNvbnN0IFttZW51U2hvd24sIHNldE1lbnVTaG93bl0gPSB1c2VTdGF0ZShmYWxzZSlcclxuICBjb25zdCBoYXNNZW51ID0gISFtZW51XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZURvY3VtZW50Q2xpY2soKSB7XHJcbiAgICBpZiAobWVudVNob3duKSB7XHJcbiAgICAgIHNldE1lbnVTaG93bihmYWxzZSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAobWVudVNob3duKSB7XHJcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlRG9jdW1lbnRDbGljaylcclxuICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZURvY3VtZW50Q2xpY2spXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVyblxyXG4gIH0pXHJcblxyXG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEFuY2hvckVsZW1lbnQ+KSA9PiB7XHJcbiAgICBpZiAoaGFzTWVudSkge1xyXG4gICAgICBzZXRNZW51U2hvd24oIW1lbnVTaG93bilcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChvbkNsaWNrKSB7XHJcbiAgICAgICAgb25DbGljayhlKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPE5hdkJhckljb25XcmFwcGVyIGFsaWdubWVudD17YWxpZ25tZW50fT5cclxuICAgICAgPE5hdkJhckljb25BbmNob3IgbWVudVNob3duPXttZW51U2hvd259IG9uQ2xpY2s9e2hhbmRsZUNsaWNrfSB7Li4ucmVzdH0+XHJcbiAgICAgICAge2NoaWxkcmVufVxyXG4gICAgICA8L05hdkJhckljb25BbmNob3I+XHJcbiAgICAgIHtoYXNNZW51ICYmIG1lbnVTaG93biAmJiA8TmF2QmFyRHJvcGRvd24gb25DbGljaz17KCkgPT4gc2V0TWVudVNob3duKGZhbHNlKX0+e21lbnV9PC9OYXZCYXJEcm9wZG93bj59XHJcbiAgICA8L05hdkJhckljb25XcmFwcGVyPlxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IE5hdkJhckRyb3Bkb3duID0gc3R5bGVkLmRpdmBcclxuICB6LWluZGV4OiAxO1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIGhlaWdodDogYXV0bztcclxuICB0b3A6IDEwMCU7XHJcbiAgcmlnaHQ6IDA7XHJcbiAgd2lkdGg6IDMwMHB4O1xyXG4gIGN1cnNvcjogZGVmYXVsdDtcclxuYFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTmF2QmFyXHJcbiJdfQ== */"); // tslint:disable-next-line: no-empty


export var NavBarIcon = function NavBarIcon(_ref3) {
  var children = _ref3.children,
      alignment = _ref3.alignment,
      menu = _ref3.menu,
      onClick = _ref3.onClick,
      rest = _objectWithoutProperties(_ref3, ["children", "alignment", "menu", "onClick"]);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      menuShown = _useState2[0],
      setMenuShown = _useState2[1];

  var hasMenu = !!menu;

  function handleDocumentClick() {
    if (menuShown) {
      setMenuShown(false);
    }
  }

  useEffect(function () {
    if (menuShown) {
      document.addEventListener('click', handleDocumentClick);
      return function () {
        document.removeEventListener('click', handleDocumentClick);
      };
    }

    return;
  });

  var handleClick = function handleClick(e) {
    if (hasMenu) {
      setMenuShown(!menuShown);
    } else {
      if (onClick) {
        onClick(e);
      }
    }
  };

  return ___EmotionJSX(NavBarIconWrapper, {
    alignment: alignment
  }, ___EmotionJSX(NavBarIconAnchor, _extends({
    menuShown: menuShown,
    onClick: handleClick
  }, rest), children), hasMenu && menuShown && ___EmotionJSX(NavBarDropdown, {
    onClick: function onClick() {
      return setMenuShown(false);
    }
  }, menu));
};
export var NavBarDropdown = _styled("div", {
  target: "emu4ai45"
})(process.env.NODE_ENV === "production" ? {
  name: "1tmio9v",
  styles: "z-index:1;position:absolute;overflow:hidden;height:auto;top:100%;right:0;width:300px;cursor:default;"
} : {
  name: "1tmio9v",
  styles: "z-index:1;position:absolute;overflow:hidden;height:auto;top:100%;right:0;width:300px;cursor:default;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9uYXYtYmFyL05hdkJhci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOEt3QyIsImZpbGUiOiIuLi8uLi9zcmMvbmF2LWJhci9OYXZCYXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXHJcbmltcG9ydCB7IHBhbGV0dGUgfSBmcm9tICdAZGZkcy1zaGFyZWQvY29sb3JzJ1xyXG5pbXBvcnQgTG9nbyBmcm9tICcuLi9sb2dvL0xvZ28nXHJcbmltcG9ydCBjc3MgZnJvbSAnQGVtb3Rpb24vY3NzJ1xyXG5pbXBvcnQgeyBtZWRpYSB9IGZyb20gJy4uL3N0eWxlcy9tZWRpYSdcclxuaW1wb3J0IHsgcmVtIH0gZnJvbSAnLi4vc3R5bGVzL3JlbSdcclxuXHJcbnR5cGUgSXRlbUFsaWdubWVudCA9ICdsZWZ0JyB8ICdyaWdodCdcclxuXHJcbnR5cGUgTmF2QmFyUHJvcHMgPSB7XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nXHJcbiAgc2hvd0xvZ28/OiBib29sZWFuXHJcbiAgaHJlZj86IHN0cmluZ1xyXG59XHJcblxyXG50eXBlIEl0ZW1Qcm9wcyA9IHtcclxuICBocmVmOiBzdHJpbmdcclxuICBjbGFzc05hbWU/OiBzdHJpbmdcclxuICBhbGlnbm1lbnQ/OiBJdGVtQWxpZ25tZW50XHJcbiAgc2VsZWN0ZWQ/OiBib29sZWFuXHJcbn1cclxuXHJcbmNvbnN0IERGRFNMb2dvID0gc3R5bGVkKExvZ28pYFxyXG4gIGhlaWdodDogJHtyZW0oMzIpfTtcclxuICB3aWR0aDogJHtyZW0oMTEyKX07XHJcbiAgbWFyZ2luLXJpZ2h0OiAke3JlbSgyMCl9O1xyXG5gXHJcblxyXG5jb25zdCBOYXZCYXJDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGJhY2tncm91bmQtY29sb3I6ICR7cGFsZXR0ZS53aGl0ZS5wcmltYXJ5fTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgbWluLWhlaWdodDogJHtyZW0oNjApfTtcclxuICAvKiBJRSBmbGV4Ym94IG1pbi1oZWlnaHQgZml4ICovXHJcbiAgOmFmdGVyIHtcclxuICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgbWluLWhlaWdodDogaW5oZXJpdDtcclxuICAgIGZvbnQtc2l6ZTogMDtcclxuICB9XHJcbmBcclxuXHJcbmNvbnN0IE5hdkJhcjogUmVhY3QuRkM8TmF2QmFyUHJvcHM+ID0gKHsgaHJlZiwgY2xhc3NOYW1lLCBzaG93TG9nbywgY2hpbGRyZW4sIC4uLnJlc3QgfSkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8TmF2QmFyQ29udGFpbmVyIGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBkYXRhLXRlc3RpZD1cIk5hdkJhclwiIHsuLi5yZXN0fT5cclxuICAgICAge3Nob3dMb2dvICYmIChcclxuICAgICAgICA8YSBocmVmPXtocmVmfT5cclxuICAgICAgICAgIDxERkRTTG9nbyAvPlxyXG4gICAgICAgIDwvYT5cclxuICAgICAgKX1cclxuICAgICAge2NoaWxkcmVufVxyXG4gICAgPC9OYXZCYXJDb250YWluZXI+XHJcbiAgKVxyXG59XHJcblxyXG5OYXZCYXIuZGVmYXVsdFByb3BzID0ge1xyXG4gIHNob3dMb2dvOiB0cnVlLFxyXG4gIGhyZWY6ICcvJyxcclxufVxyXG5cclxuY29uc3QgYmFzZUl0ZW1TdHlsZXMgPSBjc3NgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgYWxpZ24tc2VsZjogc3RyZXRjaDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICBwYWRkaW5nOiAwIDEuNXJlbTtcclxuICBjb2xvcjogJHtwYWxldHRlLnRleHRHcmV5LnByaW1hcnl9O1xyXG5gXHJcblxyXG5jb25zdCBJdGVtQW5jaG9yID0gc3R5bGVkLmE8eyBhbGlnbm1lbnQ/OiBJdGVtQWxpZ25tZW50OyBzZWxlY3RlZD86IGJvb2xlYW4gfT5gXHJcbiAgJHtiYXNlSXRlbVN0eWxlc31cclxuICBjb2xvcjogJHtwYWxldHRlLmdyb3VwQmx1ZS5wcmltYXJ5fTtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke3AgPT4gKHAuc2VsZWN0ZWQgPyBwYWxldHRlLmFjdGlvbkJsdWUubGlnaHQgOiAndHJhbnNwYXJlbnQnKX07XHJcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAke3BhbGV0dGUuYWN0aW9uQmx1ZS5saWdodH07XHJcbiAgZm9udC1zaXplOiAxcmVtO1xyXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcblxyXG4gIDpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3BhbGV0dGUuYWN0aW9uQmx1ZS50aW50fTtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICB9XHJcblxyXG4gIHRyYW5zZm9ybTogc2tld1goLTMwZGVnKTtcclxuICBzcGFuIHtcclxuICAgIHRyYW5zZm9ybTogc2tld1goMzBkZWcpO1xyXG4gIH1cclxuXHJcbiAgJHttZWRpYS5sdCgnbWQnKX0ge1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICB9XHJcbmBcclxuXHJcbi8vIFRPRE86IGNvbnNpZGVyIHVzaW5nIGZvcndhcmRSZWZcclxuZXhwb3J0IGNvbnN0IE5hdkJhckl0ZW06IFJlYWN0LkZDPEl0ZW1Qcm9wcz4gPSAoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBocmVmLCAuLi5yZXN0IH0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPEl0ZW1BbmNob3IgaHJlZj17aHJlZn0gY2xhc3NOYW1lPXtjbGFzc05hbWV9IHsuLi5yZXN0fT5cclxuICAgICAgPHNwYW4+e2NoaWxkcmVufTwvc3Bhbj5cclxuICAgIDwvSXRlbUFuY2hvcj5cclxuICApXHJcbn1cclxuXHJcbmNvbnN0IHB1c2hSaWdodCA9IGNzc2BcclxuICBtYXJnaW4tbGVmdDogYXV0bztcclxuICAmIH4gJiB7XHJcbiAgICBtYXJnaW4tbGVmdDogMDtcclxuICB9XHJcbmBcclxudHlwZSBOYXZCYXJJY29uUHJvcHMgPSBSZWFjdC5BbmNob3JIVE1MQXR0cmlidXRlczxIVE1MQW5jaG9yRWxlbWVudD4gJlxyXG4gIEl0ZW1Qcm9wcyAmIHsgbWVudT86IFJlYWN0LlJlYWN0Tm9kZTsgb25DbGljaz86IFJlYWN0Lk1vdXNlRXZlbnRIYW5kbGVyPEhUTUxBbmNob3JFbGVtZW50PiB9XHJcblxyXG5leHBvcnQgY29uc3QgTmF2QmFySWNvbkFuY2hvciA9IHN0eWxlZC5hPHsgbWVudVNob3duOiBib29sZWFuIH0+YFxyXG4gICR7YmFzZUl0ZW1TdHlsZXN9XHJcbiAgY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLnByaW1hcnl9O1xyXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xyXG5cclxuICA6aG92ZXIge1xyXG4gICAgY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLmhvdmVyfTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICR7cGFsZXR0ZS5hY3Rpb25CbHVlLnRpbnR9O1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gIH1cclxuXHJcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtwID0+IHAubWVudVNob3duICYmIHBhbGV0dGUuYWN0aW9uQmx1ZS50aW50fTtcclxuYFxyXG5cclxuY29uc3QgTmF2QmFySWNvbldyYXBwZXIgPSBzdHlsZWQuZGl2PHsgYWxpZ25tZW50PzogSXRlbUFsaWdubWVudCB9PmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBhbGlnbi1zZWxmOiBzdHJldGNoO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgJHtwID0+IHAuYWxpZ25tZW50ID09PSAncmlnaHQnICYmIHB1c2hSaWdodH1cclxuYFxyXG5cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1lbXB0eVxyXG5leHBvcnQgY29uc3QgTmF2QmFySWNvbjogUmVhY3QuRkM8TmF2QmFySWNvblByb3BzPiA9ICh7IGNoaWxkcmVuLCBhbGlnbm1lbnQsIG1lbnUsIG9uQ2xpY2ssIC4uLnJlc3QgfSkgPT4ge1xyXG4gIGNvbnN0IFttZW51U2hvd24sIHNldE1lbnVTaG93bl0gPSB1c2VTdGF0ZShmYWxzZSlcclxuICBjb25zdCBoYXNNZW51ID0gISFtZW51XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZURvY3VtZW50Q2xpY2soKSB7XHJcbiAgICBpZiAobWVudVNob3duKSB7XHJcbiAgICAgIHNldE1lbnVTaG93bihmYWxzZSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAobWVudVNob3duKSB7XHJcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlRG9jdW1lbnRDbGljaylcclxuICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZURvY3VtZW50Q2xpY2spXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVyblxyXG4gIH0pXHJcblxyXG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gKGU6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEFuY2hvckVsZW1lbnQ+KSA9PiB7XHJcbiAgICBpZiAoaGFzTWVudSkge1xyXG4gICAgICBzZXRNZW51U2hvd24oIW1lbnVTaG93bilcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChvbkNsaWNrKSB7XHJcbiAgICAgICAgb25DbGljayhlKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPE5hdkJhckljb25XcmFwcGVyIGFsaWdubWVudD17YWxpZ25tZW50fT5cclxuICAgICAgPE5hdkJhckljb25BbmNob3IgbWVudVNob3duPXttZW51U2hvd259IG9uQ2xpY2s9e2hhbmRsZUNsaWNrfSB7Li4ucmVzdH0+XHJcbiAgICAgICAge2NoaWxkcmVufVxyXG4gICAgICA8L05hdkJhckljb25BbmNob3I+XHJcbiAgICAgIHtoYXNNZW51ICYmIG1lbnVTaG93biAmJiA8TmF2QmFyRHJvcGRvd24gb25DbGljaz17KCkgPT4gc2V0TWVudVNob3duKGZhbHNlKX0+e21lbnV9PC9OYXZCYXJEcm9wZG93bj59XHJcbiAgICA8L05hdkJhckljb25XcmFwcGVyPlxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IE5hdkJhckRyb3Bkb3duID0gc3R5bGVkLmRpdmBcclxuICB6LWluZGV4OiAxO1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIGhlaWdodDogYXV0bztcclxuICB0b3A6IDEwMCU7XHJcbiAgcmlnaHQ6IDA7XHJcbiAgd2lkdGg6IDMwMHB4O1xyXG4gIGN1cnNvcjogZGVmYXVsdDtcclxuYFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTmF2QmFyXHJcbiJdfQ== */"
});
export default NavBar;